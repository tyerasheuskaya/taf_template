<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.1.1 (Python 3.10.12 on win32)" generated="20240628 12:02:10.460" rpa="true" schemaversion="4">
<suite id="s1" name="E2E Stub Test" source="C:\Users\Tatsiana_Yerasheuska\Documents\WB\3.Repos\taf_template\tests\e2e\e2e_stub_test.robot">
<test id="s1-t1" name="Test Case 3" line="25">
<kw name="Mock Requests Example" library="end_to_end">
<kw name="Create Mock Session" library="MockServerLibrary">
<arg>${MOCK_SERVER}</arg>
<doc>Creates an HTTP session towards mockserver.</doc>
<status status="PASS" starttime="20240628 12:02:11.456" endtime="20240628 12:02:11.457"/>
</kw>
<kw name="Reset All Requests" library="MockServerLibrary">
<doc>Clears all expectations and received requests from the mockserver.</doc>
<status status="PASS" starttime="20240628 12:02:11.457" endtime="20240628 12:02:11.542"/>
</kw>
<kw name="Create Default Mock Expectation" library="MockServerLibrary">
<arg>GET</arg>
<arg>/service_one</arg>
<arg>response_body={"key": "some value service 1"}</arg>
<doc>Creates a default expectation to be used by mockserver.</doc>
<status status="PASS" starttime="20240628 12:02:11.542" endtime="20240628 12:02:11.554"/>
</kw>
<kw name="Create Default Mock Expectation" library="MockServerLibrary">
<arg>GET</arg>
<arg>/service_two</arg>
<arg>response_body={"key": "some value service 2"}</arg>
<doc>Creates a default expectation to be used by mockserver.</doc>
<status status="PASS" starttime="20240628 12:02:11.554" endtime="20240628 12:02:11.571"/>
</kw>
<kw name="GET" library="RequestsLibrary">
<var>${service_one_resnonse}</var>
<arg>${MOCK_SERVER}/service_one</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20240628 12:02:11.579" level="INFO">GET Request : url=http://localhost:1080//service_one 
 path_url=//service_one 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20240628 12:02:11.581" level="INFO">GET Response : url=http://localhost:1080//service_one 
 status=200, reason=OK 
 headers={'connection': 'keep-alive', 'content-length': '37'} 
 body="{\"key\": \"some value service 1\"}" 
 </msg>
<msg timestamp="20240628 12:02:11.581" level="INFO">${service_one_resnonse} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20240628 12:02:11.571" endtime="20240628 12:02:11.581"/>
</kw>
<kw name="GET" library="RequestsLibrary">
<var>${service_two_resnonse}</var>
<arg>${MOCK_SERVER}/service_two</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20240628 12:02:11.591" level="INFO">GET Request : url=http://localhost:1080//service_two 
 path_url=//service_two 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20240628 12:02:11.591" level="INFO">GET Response : url=http://localhost:1080//service_two 
 status=200, reason=OK 
 headers={'connection': 'keep-alive', 'content-length': '37'} 
 body="{\"key\": \"some value service 2\"}" 
 </msg>
<msg timestamp="20240628 12:02:11.591" level="INFO">${service_two_resnonse} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20240628 12:02:11.582" endtime="20240628 12:02:11.591"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${service_one_resnonse_body}</var>
<arg>${service_one_resnonse.json()}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240628 12:02:11.593" level="INFO">${service_one_resnonse_body} = {"key": "some value service 1"}</msg>
<status status="PASS" starttime="20240628 12:02:11.592" endtime="20240628 12:02:11.594"/>
</kw>
<status status="PASS" starttime="20240628 12:02:11.456" endtime="20240628 12:02:11.594"/>
</kw>
<doc>Mocking Example</doc>
<status status="PASS" starttime="20240628 12:02:11.455" endtime="20240628 12:02:11.594"/>
</test>
<test id="s1-t2" name="Test case 4" line="30">
<kw name="Log To Console" library="BuiltIn">
<arg>Run for local oracle 19</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20240628 12:02:11.596" endtime="20240628 12:02:11.597"/>
</kw>
<kw name="Connect to db" library="connectors">
<arg>ORACLE19</arg>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${CONNECTION}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240628 12:02:11.598" level="INFO">${CONNECTION} = </msg>
<status status="PASS" starttime="20240628 12:02:11.598" endtime="20240628 12:02:11.598"/>
</kw>
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>dbConfigFile= ${connections}</arg>
<arg>alias=${db_name}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240628 12:02:11.631" level="INFO">Using thin Oracle client mode</msg>
<msg timestamp="20240628 12:02:11.631" level="INFO">Connecting using: oracledb.connect(user=system, password=***, params=ConnectParams(user=None, proxy_user=None, host='localhost', port=8888, protocol='tcp', https_proxy=None, https_proxy_port=0, service_name='LOCALDB', sid=None, server_type=None, cclass=None, purity=0, expire_time=0, retry_count=0, retry_delay=0, tcp_connect_timeout=60.0, ssl_server_dn_match=True, ssl_server_cert_dn=None, wallet_location=None, events=False, externalauth=False, mode=0, disable_oob=False, stmtcachesize=20, edition=None, tag=None, matchanytag=False, config_dir=None, appcontext=None, shardingkey=None, supershardingkey=None, debug_jdwp=None, connection_id_prefix=None, ssl_context=None, sdu=8192, pool_boundary=None, use_tcp_fast_open=False))</msg>
<status status="PASS" starttime="20240628 12:02:11.599" endtime="20240628 12:02:11.672"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Connected to ${db_name} successfully!</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20240628 12:02:11.673" endtime="20240628 12:02:11.674"/>
</kw>
<status status="PASS" starttime="20240628 12:02:11.597" endtime="20240628 12:02:11.674"/>
</kw>
<kw name="Get data" library="end_to_end">
<arg>${LOCAL_MDM}</arg>
<kw name="Get Row Counts" library="queries">
<var>${result}</var>
<arg>${CONNECTION}</arg>
<arg>${layer_params}[schema]</arg>
<arg>${layer_params}[table_name]</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${query}</var>
<arg>SELECT COUNT(*) FROM ${schema}.${table}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240628 12:02:11.676" level="INFO">${query} = SELECT COUNT(*) FROM TEST.LT1</msg>
<status status="PASS" starttime="20240628 12:02:11.676" endtime="20240628 12:02:11.676"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${query}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240628 12:02:11.676" level="INFO">SELECT COUNT(*) FROM TEST.LT1</msg>
<status status="PASS" starttime="20240628 12:02:11.676" endtime="20240628 12:02:11.676"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>@{result}</var>
<arg>${query}</arg>
<arg>${connection}</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240628 12:02:11.677" level="INFO">Executing : Query  |  SELECT COUNT(*) FROM TEST.LT1 </msg>
<msg timestamp="20240628 12:02:11.679" level="INFO">@{result} = [ (10,) ]</msg>
<status status="PASS" starttime="20240628 12:02:11.677" endtime="20240628 12:02:11.679"/>
</kw>
<return>
<value>${result}[0][0]</value>
<status status="PASS" starttime="20240628 12:02:11.680" endtime="20240628 12:02:11.680"/>
</return>
<msg timestamp="20240628 12:02:11.681" level="INFO">${result} = 10</msg>
<status status="PASS" starttime="20240628 12:02:11.675" endtime="20240628 12:02:11.681"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20240628 12:02:11.681" endtime="20240628 12:02:11.682"/>
</kw>
<status status="PASS" starttime="20240628 12:02:11.674" endtime="20240628 12:02:11.682"/>
</kw>
<kw name="Disconnect from db" library="connectors">
<arg>ORACLE19</arg>
<kw name="Disconnect From Database" library="DatabaseLibrary">
<arg>alias=${db_name}</arg>
<doc>Disconnects from the database.</doc>
<msg timestamp="20240628 12:02:11.684" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240628 12:02:11.683" endtime="20240628 12:02:11.686"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Disconnected from ${db_name} successfully!</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20240628 12:02:11.686" endtime="20240628 12:02:11.687"/>
</kw>
<status status="PASS" starttime="20240628 12:02:11.683" endtime="20240628 12:02:11.688"/>
</kw>
<doc>Flow for local Oracle 19</doc>
<status status="PASS" starttime="20240628 12:02:11.595" endtime="20240628 12:02:11.688"/>
</test>
<test id="s1-t3" name="Test case 5" line="37">
<kw name="Log To Console" library="BuiltIn">
<arg>Run for local mssql</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20240628 12:02:11.690" endtime="20240628 12:02:11.691"/>
</kw>
<kw name="Connect to db" library="connectors">
<arg>MSSQL_UFFS</arg>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${CONNECTION}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240628 12:02:11.692" level="INFO">${CONNECTION} = </msg>
<status status="PASS" starttime="20240628 12:02:11.692" endtime="20240628 12:02:11.693"/>
</kw>
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>dbConfigFile= ${connections}</arg>
<arg>alias=${db_name}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240628 12:02:11.698" level="INFO">Connecting using : pyodbc.connect(DRIVER={SQL Server};DATABASE=master;UID=sa;PWD=***;charset=utf8mb4;SERVER=localhost,1433)</msg>
<status status="PASS" starttime="20240628 12:02:11.693" endtime="20240628 12:02:11.739"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Connected to ${db_name} successfully!</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20240628 12:02:11.739" endtime="20240628 12:02:11.740"/>
</kw>
<status status="PASS" starttime="20240628 12:02:11.692" endtime="20240628 12:02:11.740"/>
</kw>
<kw name="Get data" library="end_to_end">
<arg>${RAW}</arg>
<kw name="Get Row Counts" library="queries">
<var>${result}</var>
<arg>${CONNECTION}</arg>
<arg>${layer_params}[schema]</arg>
<arg>${layer_params}[table_name]</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${query}</var>
<arg>SELECT COUNT(*) FROM ${schema}.${table}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240628 12:02:11.743" level="INFO">${query} = SELECT COUNT(*) FROM dbo.LT1</msg>
<status status="PASS" starttime="20240628 12:02:11.742" endtime="20240628 12:02:11.743"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${query}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240628 12:02:11.744" level="INFO">SELECT COUNT(*) FROM dbo.LT1</msg>
<status status="PASS" starttime="20240628 12:02:11.743" endtime="20240628 12:02:11.744"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>@{result}</var>
<arg>${query}</arg>
<arg>${connection}</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240628 12:02:11.744" level="INFO">Executing : Query  |  SELECT COUNT(*) FROM dbo.LT1 </msg>
<msg timestamp="20240628 12:02:11.747" level="INFO">@{result} = [ (11,) ]</msg>
<status status="PASS" starttime="20240628 12:02:11.744" endtime="20240628 12:02:11.747"/>
</kw>
<return>
<value>${result}[0][0]</value>
<status status="PASS" starttime="20240628 12:02:11.747" endtime="20240628 12:02:11.748"/>
</return>
<msg timestamp="20240628 12:02:11.748" level="INFO">${result} = 11</msg>
<status status="PASS" starttime="20240628 12:02:11.742" endtime="20240628 12:02:11.748"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20240628 12:02:11.749" endtime="20240628 12:02:11.749"/>
</kw>
<status status="PASS" starttime="20240628 12:02:11.741" endtime="20240628 12:02:11.750"/>
</kw>
<kw name="Disconnect from db" library="connectors">
<arg>MSSQL_UFFS</arg>
<kw name="Disconnect From Database" library="DatabaseLibrary">
<arg>alias=${db_name}</arg>
<doc>Disconnects from the database.</doc>
<msg timestamp="20240628 12:02:11.752" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240628 12:02:11.751" endtime="20240628 12:02:11.753"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Disconnected from ${db_name} successfully!</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20240628 12:02:11.753" endtime="20240628 12:02:11.754"/>
</kw>
<status status="PASS" starttime="20240628 12:02:11.751" endtime="20240628 12:02:11.754"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Run for local oracle 19</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20240628 12:02:11.755" endtime="20240628 12:02:11.755"/>
</kw>
<kw name="Connect to db" library="connectors">
<arg>ORACLE19</arg>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${CONNECTION}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240628 12:02:11.757" level="INFO">${CONNECTION} = </msg>
<status status="PASS" starttime="20240628 12:02:11.756" endtime="20240628 12:02:11.757"/>
</kw>
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>dbConfigFile= ${connections}</arg>
<arg>alias=${db_name}</arg>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.</doc>
<msg timestamp="20240628 12:02:11.760" level="INFO">Using thin Oracle client mode</msg>
<msg timestamp="20240628 12:02:11.760" level="INFO">Connecting using: oracledb.connect(user=system, password=***, params=ConnectParams(user=None, proxy_user=None, host='localhost', port=8888, protocol='tcp', https_proxy=None, https_proxy_port=0, service_name='LOCALDB', sid=None, server_type=None, cclass=None, purity=0, expire_time=0, retry_count=0, retry_delay=0, tcp_connect_timeout=60.0, ssl_server_dn_match=True, ssl_server_cert_dn=None, wallet_location=None, events=False, externalauth=False, mode=0, disable_oob=False, stmtcachesize=20, edition=None, tag=None, matchanytag=False, config_dir=None, appcontext=None, shardingkey=None, supershardingkey=None, debug_jdwp=None, connection_id_prefix=None, ssl_context=None, sdu=8192, pool_boundary=None, use_tcp_fast_open=False))</msg>
<status status="PASS" starttime="20240628 12:02:11.758" endtime="20240628 12:02:11.872"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Connected to ${db_name} successfully!</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20240628 12:02:11.872" endtime="20240628 12:02:11.873"/>
</kw>
<status status="PASS" starttime="20240628 12:02:11.756" endtime="20240628 12:02:11.874"/>
</kw>
<kw name="Get data" library="end_to_end">
<arg>${LOCAL_MDM}</arg>
<kw name="Get Row Counts" library="queries">
<var>${result}</var>
<arg>${CONNECTION}</arg>
<arg>${layer_params}[schema]</arg>
<arg>${layer_params}[table_name]</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${query}</var>
<arg>SELECT COUNT(*) FROM ${schema}.${table}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240628 12:02:11.876" level="INFO">${query} = SELECT COUNT(*) FROM TEST.LT1</msg>
<status status="PASS" starttime="20240628 12:02:11.876" endtime="20240628 12:02:11.876"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${query}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240628 12:02:11.877" level="INFO">SELECT COUNT(*) FROM TEST.LT1</msg>
<status status="PASS" starttime="20240628 12:02:11.876" endtime="20240628 12:02:11.877"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>@{result}</var>
<arg>${query}</arg>
<arg>${connection}</arg>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.</doc>
<msg timestamp="20240628 12:02:11.878" level="INFO">Executing : Query  |  SELECT COUNT(*) FROM TEST.LT1 </msg>
<msg timestamp="20240628 12:02:11.881" level="INFO">@{result} = [ (10,) ]</msg>
<status status="PASS" starttime="20240628 12:02:11.877" endtime="20240628 12:02:11.881"/>
</kw>
<return>
<value>${result}[0][0]</value>
<status status="PASS" starttime="20240628 12:02:11.881" endtime="20240628 12:02:11.881"/>
</return>
<msg timestamp="20240628 12:02:11.882" level="INFO">${result} = 10</msg>
<status status="PASS" starttime="20240628 12:02:11.875" endtime="20240628 12:02:11.882"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20240628 12:02:11.882" endtime="20240628 12:02:11.883"/>
</kw>
<status status="PASS" starttime="20240628 12:02:11.875" endtime="20240628 12:02:11.883"/>
</kw>
<kw name="Disconnect from db" library="connectors">
<arg>ORACLE19</arg>
<kw name="Disconnect From Database" library="DatabaseLibrary">
<arg>alias=${db_name}</arg>
<doc>Disconnects from the database.</doc>
<msg timestamp="20240628 12:02:11.885" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20240628 12:02:11.885" endtime="20240628 12:02:11.888"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Disconnected from ${db_name} successfully!</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20240628 12:02:11.888" endtime="20240628 12:02:11.889"/>
</kw>
<status status="PASS" starttime="20240628 12:02:11.884" endtime="20240628 12:02:11.889"/>
</kw>
<doc>Flow for local mssql</doc>
<status status="PASS" starttime="20240628 12:02:11.690" endtime="20240628 12:02:11.890"/>
</test>
<doc>Test case 1</doc>
<status status="PASS" starttime="20240628 12:02:10.465" endtime="20240628 12:02:11.891"/>
</suite>
<statistics>
<total>
<stat pass="3" fail="0" skip="0">All Tasks</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="3" fail="0" skip="0" id="s1" name="E2E Stub Test">E2E Stub Test</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
